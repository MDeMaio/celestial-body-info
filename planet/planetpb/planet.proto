syntax = "proto3";

package planet;

option go_package = "planetpb";

// We can define our planet and all of its corresponding data here, we can split this up later if we want.
message Planet {
    string planet_id = 1;
    string name = 2;
    OrbitalInfo orbitalinfo = 3;
    PhysicalInfo physicalinfo = 4;
    AtmosphereInfo atmosphereinfo = 5;
}

message OrbitalInfo {
    double aphelion = 1; // golang float64
    double perihelion = 2; // golang float64
    double semimajoraxis = 3; // golang float64
    double eccentricity = 4; // golang float64
    double orbitalperiod = 5; // golang float64
    double synodicperiod = 6; // golang float64
    double avgorbitalspeed = 7; // golang float64
    double meananomaly = 8; // golang float64
    Inclination inclination = 9; 
    double longitudeofascendingnode = 10; // golang float64
    uint32 satelites = 11; // golang uint32
}

message PhysicalInfo {
    string meanradius = 1; 
    string equatorialradius = 2; 
    string polarradius = 3; 
    string flattening = 4; 
    double surfacearea = 5; // golang float64
    double volume = 6; // golang float64
    double mass = 7; // golang float64
    double meandensity = 8; // golang float64
    double surfacegravity = 9; // golang float64
    string momentofinertiafactor = 10;
    double escapevelocity = 11; // golang float64
    double siderealrotationperiod = 12; // golang float64
    double equatorialrotationvelocity = 13; // golang float64
    double axialtilt = 14; // golang float64
    double northpolerightascension = 15; // golang float64
    double northpoledeclination = 16; // golang float64
    Albedo albedo = 17; 
    SurfaceTemp surfacetemp = 18;
    ApparentMagnitude apparentmagnitude = 19;
}

message AtmosphereInfo{
    double surfacepressure = 1; // golang float64
    repeated Element element = 2;
}

message Element{
    string name = 1;
    double percentasdecimal = 2; // golang float64(We will calculate the percent composition of this element based on the float provided)
}

message SurfaceTemp {
    double min = 1; // golang int32
    double max = 2; // golang int32
    double mean = 3; // golang int32
}

message ApparentMagnitude{
    double min = 1; // golang float64
    double max = 2; // golang float64
}

message Inclination {
    double ecliptic = 1; // golang float64
    double sunsequator = 2; // golang float64
    double invariableplane = 3; // golang float64
}

message Albedo {
    double geometric = 1; // golang float64
    double bond = 2; // golang float64
}

message ReadPlanetRequest {
    string planet_id = 1;   // We can fetch by the mongodb ID, which we will have on the frontend Vue app.
}

message ReadPlanetResponse {
    Planet planet = 1; // List of planets
}

message ListPlanetRequest {
}

message ListPlanetResponse {
    repeated Planet planet = 1; // List of planets
}

service PlanetService {
    rpc ReadPlanet (ReadPlanetRequest) returns (ReadPlanetResponse); // return NOT_FOUND if not found
    rpc ListPlanet (ListPlanetRequest) returns (ListPlanetResponse); // return NOT_FOUND if not found
}
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: planet/planetpb/planet.proto

package planetpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// We can define our planet and all of its corresponding data here, we can split this up later if we want.
type Planet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanetId       string          `protobuf:"bytes,1,opt,name=planet_id,json=planetId,proto3" json:"planet_id,omitempty"`
	Name           string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OrbitalInfo    *OrbitalInfo    `protobuf:"bytes,3,opt,name=orbital_info,json=orbitalInfo,proto3" json:"orbital_info,omitempty"`
	PhysicalInfo   *PhysicalInfo   `protobuf:"bytes,4,opt,name=physical_info,json=physicalInfo,proto3" json:"physical_info,omitempty"`
	AtmosphereInfo *AtmosphereInfo `protobuf:"bytes,5,opt,name=atmosphere_info,json=atmosphereInfo,proto3" json:"atmosphere_info,omitempty"`
}

func (x *Planet) Reset() {
	*x = Planet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Planet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Planet) ProtoMessage() {}

func (x *Planet) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Planet.ProtoReflect.Descriptor instead.
func (*Planet) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{0}
}

func (x *Planet) GetPlanetId() string {
	if x != nil {
		return x.PlanetId
	}
	return ""
}

func (x *Planet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Planet) GetOrbitalInfo() *OrbitalInfo {
	if x != nil {
		return x.OrbitalInfo
	}
	return nil
}

func (x *Planet) GetPhysicalInfo() *PhysicalInfo {
	if x != nil {
		return x.PhysicalInfo
	}
	return nil
}

func (x *Planet) GetAtmosphereInfo() *AtmosphereInfo {
	if x != nil {
		return x.AtmosphereInfo
	}
	return nil
}

type OrbitalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aphelion                 float64      `protobuf:"fixed64,1,opt,name=aphelion,proto3" json:"aphelion,omitempty"`                                        // golang float64
	Perihelion               float64      `protobuf:"fixed64,2,opt,name=perihelion,proto3" json:"perihelion,omitempty"`                                    // golang float64
	SemiMajorAxis            float64      `protobuf:"fixed64,3,opt,name=semi_major_axis,json=semiMajorAxis,proto3" json:"semi_major_axis,omitempty"`       // golang float64
	Eccentricity             float64      `protobuf:"fixed64,4,opt,name=eccentricity,proto3" json:"eccentricity,omitempty"`                                // golang float64
	OrbitalPeriod            float64      `protobuf:"fixed64,5,opt,name=orbital_period,json=orbitalPeriod,proto3" json:"orbital_period,omitempty"`         // golang float64
	SynodicPeriod            float64      `protobuf:"fixed64,6,opt,name=synodic_period,json=synodicPeriod,proto3" json:"synodic_period,omitempty"`         // golang float64
	AvgOrbitalSpeed          float64      `protobuf:"fixed64,7,opt,name=avg_orbital_speed,json=avgOrbitalSpeed,proto3" json:"avg_orbital_speed,omitempty"` // golang float64
	MeanAnomaly              float64      `protobuf:"fixed64,8,opt,name=mean_anomaly,json=meanAnomaly,proto3" json:"mean_anomaly,omitempty"`               // golang float64
	Inclination              *Inclination `protobuf:"bytes,9,opt,name=inclination,proto3" json:"inclination,omitempty"`
	LongitudeOfAscendingNode float64      `protobuf:"fixed64,10,opt,name=longitude_of_ascending_node,json=longitudeOfAscendingNode,proto3" json:"longitude_of_ascending_node,omitempty"` // golang float64
	Satelites                uint32       `protobuf:"varint,11,opt,name=satelites,proto3" json:"satelites,omitempty"`                                                                    // golang uint32
}

func (x *OrbitalInfo) Reset() {
	*x = OrbitalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrbitalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrbitalInfo) ProtoMessage() {}

func (x *OrbitalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrbitalInfo.ProtoReflect.Descriptor instead.
func (*OrbitalInfo) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{1}
}

func (x *OrbitalInfo) GetAphelion() float64 {
	if x != nil {
		return x.Aphelion
	}
	return 0
}

func (x *OrbitalInfo) GetPerihelion() float64 {
	if x != nil {
		return x.Perihelion
	}
	return 0
}

func (x *OrbitalInfo) GetSemiMajorAxis() float64 {
	if x != nil {
		return x.SemiMajorAxis
	}
	return 0
}

func (x *OrbitalInfo) GetEccentricity() float64 {
	if x != nil {
		return x.Eccentricity
	}
	return 0
}

func (x *OrbitalInfo) GetOrbitalPeriod() float64 {
	if x != nil {
		return x.OrbitalPeriod
	}
	return 0
}

func (x *OrbitalInfo) GetSynodicPeriod() float64 {
	if x != nil {
		return x.SynodicPeriod
	}
	return 0
}

func (x *OrbitalInfo) GetAvgOrbitalSpeed() float64 {
	if x != nil {
		return x.AvgOrbitalSpeed
	}
	return 0
}

func (x *OrbitalInfo) GetMeanAnomaly() float64 {
	if x != nil {
		return x.MeanAnomaly
	}
	return 0
}

func (x *OrbitalInfo) GetInclination() *Inclination {
	if x != nil {
		return x.Inclination
	}
	return nil
}

func (x *OrbitalInfo) GetLongitudeOfAscendingNode() float64 {
	if x != nil {
		return x.LongitudeOfAscendingNode
	}
	return 0
}

func (x *OrbitalInfo) GetSatelites() uint32 {
	if x != nil {
		return x.Satelites
	}
	return 0
}

type PhysicalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeanRadius                 string             `protobuf:"bytes,1,opt,name=mean_radius,json=meanRadius,proto3" json:"mean_radius,omitempty"`
	EquatorialRadius           string             `protobuf:"bytes,2,opt,name=equatorial_radius,json=equatorialRadius,proto3" json:"equatorial_radius,omitempty"`
	PolarRadius                string             `protobuf:"bytes,3,opt,name=polar_radius,json=polarRadius,proto3" json:"polar_radius,omitempty"`
	Flattening                 string             `protobuf:"bytes,4,opt,name=flattening,proto3" json:"flattening,omitempty"`
	SurfaceArea                float64            `protobuf:"fixed64,5,opt,name=surface_area,json=surfaceArea,proto3" json:"surface_area,omitempty"`          // golang float64
	Volume                     float64            `protobuf:"fixed64,6,opt,name=volume,proto3" json:"volume,omitempty"`                                       // golang float64
	Mass                       float64            `protobuf:"fixed64,7,opt,name=mass,proto3" json:"mass,omitempty"`                                           // golang float64
	MeanDensity                float64            `protobuf:"fixed64,8,opt,name=mean_density,json=meanDensity,proto3" json:"mean_density,omitempty"`          // golang float64
	SurfaceGravity             float64            `protobuf:"fixed64,9,opt,name=surface_gravity,json=surfaceGravity,proto3" json:"surface_gravity,omitempty"` // golang float64
	MomentOfInertiaFactor      string             `protobuf:"bytes,10,opt,name=moment_of_inertia_factor,json=momentOfInertiaFactor,proto3" json:"moment_of_inertia_factor,omitempty"`
	EscapeVelocity             float64            `protobuf:"fixed64,11,opt,name=escape_velocity,json=escapeVelocity,proto3" json:"escape_velocity,omitempty"`                                       // golang float64
	SiderealRotationPeriod     float64            `protobuf:"fixed64,12,opt,name=sidereal_rotation_period,json=siderealRotationPeriod,proto3" json:"sidereal_rotation_period,omitempty"`             // golang float64
	EquatorialRotationVelocity float64            `protobuf:"fixed64,13,opt,name=equatorial_rotation_velocity,json=equatorialRotationVelocity,proto3" json:"equatorial_rotation_velocity,omitempty"` // golang float64
	AxialTilt                  float64            `protobuf:"fixed64,14,opt,name=axial_tilt,json=axialTilt,proto3" json:"axial_tilt,omitempty"`                                                      // golang float64
	NorthpoleRightAscension    float64            `protobuf:"fixed64,15,opt,name=northpole_right_ascension,json=northpoleRightAscension,proto3" json:"northpole_right_ascension,omitempty"`          // golang float64
	NorthpoleDeclination       float64            `protobuf:"fixed64,16,opt,name=northpole_declination,json=northpoleDeclination,proto3" json:"northpole_declination,omitempty"`                     // golang float64
	Albedo                     *Albedo            `protobuf:"bytes,17,opt,name=albedo,proto3" json:"albedo,omitempty"`
	SurfaceTemp                *SurfaceTemp       `protobuf:"bytes,18,opt,name=surface_temp,json=surfaceTemp,proto3" json:"surface_temp,omitempty"`
	ApparentMagnitude          *ApparentMagnitude `protobuf:"bytes,19,opt,name=apparent_magnitude,json=apparentMagnitude,proto3" json:"apparent_magnitude,omitempty"`
}

func (x *PhysicalInfo) Reset() {
	*x = PhysicalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalInfo) ProtoMessage() {}

func (x *PhysicalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalInfo.ProtoReflect.Descriptor instead.
func (*PhysicalInfo) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{2}
}

func (x *PhysicalInfo) GetMeanRadius() string {
	if x != nil {
		return x.MeanRadius
	}
	return ""
}

func (x *PhysicalInfo) GetEquatorialRadius() string {
	if x != nil {
		return x.EquatorialRadius
	}
	return ""
}

func (x *PhysicalInfo) GetPolarRadius() string {
	if x != nil {
		return x.PolarRadius
	}
	return ""
}

func (x *PhysicalInfo) GetFlattening() string {
	if x != nil {
		return x.Flattening
	}
	return ""
}

func (x *PhysicalInfo) GetSurfaceArea() float64 {
	if x != nil {
		return x.SurfaceArea
	}
	return 0
}

func (x *PhysicalInfo) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *PhysicalInfo) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *PhysicalInfo) GetMeanDensity() float64 {
	if x != nil {
		return x.MeanDensity
	}
	return 0
}

func (x *PhysicalInfo) GetSurfaceGravity() float64 {
	if x != nil {
		return x.SurfaceGravity
	}
	return 0
}

func (x *PhysicalInfo) GetMomentOfInertiaFactor() string {
	if x != nil {
		return x.MomentOfInertiaFactor
	}
	return ""
}

func (x *PhysicalInfo) GetEscapeVelocity() float64 {
	if x != nil {
		return x.EscapeVelocity
	}
	return 0
}

func (x *PhysicalInfo) GetSiderealRotationPeriod() float64 {
	if x != nil {
		return x.SiderealRotationPeriod
	}
	return 0
}

func (x *PhysicalInfo) GetEquatorialRotationVelocity() float64 {
	if x != nil {
		return x.EquatorialRotationVelocity
	}
	return 0
}

func (x *PhysicalInfo) GetAxialTilt() float64 {
	if x != nil {
		return x.AxialTilt
	}
	return 0
}

func (x *PhysicalInfo) GetNorthpoleRightAscension() float64 {
	if x != nil {
		return x.NorthpoleRightAscension
	}
	return 0
}

func (x *PhysicalInfo) GetNorthpoleDeclination() float64 {
	if x != nil {
		return x.NorthpoleDeclination
	}
	return 0
}

func (x *PhysicalInfo) GetAlbedo() *Albedo {
	if x != nil {
		return x.Albedo
	}
	return nil
}

func (x *PhysicalInfo) GetSurfaceTemp() *SurfaceTemp {
	if x != nil {
		return x.SurfaceTemp
	}
	return nil
}

func (x *PhysicalInfo) GetApparentMagnitude() *ApparentMagnitude {
	if x != nil {
		return x.ApparentMagnitude
	}
	return nil
}

type AtmosphereInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurfacePressure float64    `protobuf:"fixed64,1,opt,name=surface_pressure,json=surfacePressure,proto3" json:"surface_pressure,omitempty"` // golang float64
	Element         []*Element `protobuf:"bytes,2,rep,name=element,proto3" json:"element,omitempty"`
}

func (x *AtmosphereInfo) Reset() {
	*x = AtmosphereInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtmosphereInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtmosphereInfo) ProtoMessage() {}

func (x *AtmosphereInfo) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtmosphereInfo.ProtoReflect.Descriptor instead.
func (*AtmosphereInfo) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{3}
}

func (x *AtmosphereInfo) GetSurfacePressure() float64 {
	if x != nil {
		return x.SurfacePressure
	}
	return 0
}

func (x *AtmosphereInfo) GetElement() []*Element {
	if x != nil {
		return x.Element
	}
	return nil
}

type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PercentAsDecimal float64 `protobuf:"fixed64,2,opt,name=percent_as_decimal,json=percentAsDecimal,proto3" json:"percent_as_decimal,omitempty"` // golang float64(We will calculate the percent composition of this element based on the float provided)
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{4}
}

func (x *Element) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Element) GetPercentAsDecimal() float64 {
	if x != nil {
		return x.PercentAsDecimal
	}
	return 0
}

type SurfaceTemp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min  float64 `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty"`   // golang int32
	Max  float64 `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"`   // golang int32
	Mean float64 `protobuf:"fixed64,3,opt,name=mean,proto3" json:"mean,omitempty"` // golang int32
}

func (x *SurfaceTemp) Reset() {
	*x = SurfaceTemp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurfaceTemp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurfaceTemp) ProtoMessage() {}

func (x *SurfaceTemp) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurfaceTemp.ProtoReflect.Descriptor instead.
func (*SurfaceTemp) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{5}
}

func (x *SurfaceTemp) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *SurfaceTemp) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *SurfaceTemp) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

type ApparentMagnitude struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min float64 `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty"` // golang float64
	Max float64 `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"` // golang float64
}

func (x *ApparentMagnitude) Reset() {
	*x = ApparentMagnitude{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApparentMagnitude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApparentMagnitude) ProtoMessage() {}

func (x *ApparentMagnitude) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApparentMagnitude.ProtoReflect.Descriptor instead.
func (*ApparentMagnitude) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{6}
}

func (x *ApparentMagnitude) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *ApparentMagnitude) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type Inclination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ecliptic        float64 `protobuf:"fixed64,1,opt,name=ecliptic,proto3" json:"ecliptic,omitempty"`                                      // golang float64
	SunsEquator     float64 `protobuf:"fixed64,2,opt,name=suns_equator,json=sunsEquator,proto3" json:"suns_equator,omitempty"`             // golang float64
	InvariablePlane float64 `protobuf:"fixed64,3,opt,name=invariable_plane,json=invariablePlane,proto3" json:"invariable_plane,omitempty"` // golang float64
}

func (x *Inclination) Reset() {
	*x = Inclination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inclination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inclination) ProtoMessage() {}

func (x *Inclination) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inclination.ProtoReflect.Descriptor instead.
func (*Inclination) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{7}
}

func (x *Inclination) GetEcliptic() float64 {
	if x != nil {
		return x.Ecliptic
	}
	return 0
}

func (x *Inclination) GetSunsEquator() float64 {
	if x != nil {
		return x.SunsEquator
	}
	return 0
}

func (x *Inclination) GetInvariablePlane() float64 {
	if x != nil {
		return x.InvariablePlane
	}
	return 0
}

type Albedo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Geometric float64 `protobuf:"fixed64,1,opt,name=geometric,proto3" json:"geometric,omitempty"` // golang float64
	Bond      float64 `protobuf:"fixed64,2,opt,name=bond,proto3" json:"bond,omitempty"`           // golang float64
}

func (x *Albedo) Reset() {
	*x = Albedo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Albedo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Albedo) ProtoMessage() {}

func (x *Albedo) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Albedo.ProtoReflect.Descriptor instead.
func (*Albedo) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{8}
}

func (x *Albedo) GetGeometric() float64 {
	if x != nil {
		return x.Geometric
	}
	return 0
}

func (x *Albedo) GetBond() float64 {
	if x != nil {
		return x.Bond
	}
	return 0
}

type ReadPlanetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanetId string `protobuf:"bytes,1,opt,name=planet_id,json=planetId,proto3" json:"planet_id,omitempty"` // We can fetch by the mongodb ID, which we will have on the frontend Vue app.
}

func (x *ReadPlanetRequest) Reset() {
	*x = ReadPlanetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadPlanetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPlanetRequest) ProtoMessage() {}

func (x *ReadPlanetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPlanetRequest.ProtoReflect.Descriptor instead.
func (*ReadPlanetRequest) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{9}
}

func (x *ReadPlanetRequest) GetPlanetId() string {
	if x != nil {
		return x.PlanetId
	}
	return ""
}

type ReadPlanetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Planet *Planet `protobuf:"bytes,1,opt,name=planet,proto3" json:"planet,omitempty"` // List of planets
}

func (x *ReadPlanetResponse) Reset() {
	*x = ReadPlanetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadPlanetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPlanetResponse) ProtoMessage() {}

func (x *ReadPlanetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPlanetResponse.ProtoReflect.Descriptor instead.
func (*ReadPlanetResponse) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{10}
}

func (x *ReadPlanetResponse) GetPlanet() *Planet {
	if x != nil {
		return x.Planet
	}
	return nil
}

type ListPlanetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPlanetRequest) Reset() {
	*x = ListPlanetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlanetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanetRequest) ProtoMessage() {}

func (x *ListPlanetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanetRequest.ProtoReflect.Descriptor instead.
func (*ListPlanetRequest) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{11}
}

type ListPlanetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Planet []*Planet `protobuf:"bytes,1,rep,name=planet,proto3" json:"planet,omitempty"` // List of planets
}

func (x *ListPlanetResponse) Reset() {
	*x = ListPlanetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlanetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanetResponse) ProtoMessage() {}

func (x *ListPlanetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanetResponse.ProtoReflect.Descriptor instead.
func (*ListPlanetResponse) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{12}
}

func (x *ListPlanetResponse) GetPlanet() []*Planet {
	if x != nil {
		return x.Planet
	}
	return nil
}

var File_planet_planetpb_planet_proto protoreflect.FileDescriptor

var file_planet_planetpb_planet_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x70,
	0x62, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6f,
	0x72, 0x62, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0f, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68,
	0x65, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x41, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc6, 0x03, 0x0a, 0x0b, 0x4f, 0x72, 0x62, 0x69, 0x74,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x68, 0x65, 0x6c, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x70, 0x68, 0x65, 0x6c, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x68, 0x65, 0x6c, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x68, 0x65, 0x6c, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x6d, 0x69, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
	0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x6d,
	0x69, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x41, 0x78, 0x69, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x63,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x65, 0x63, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x6f, 0x64, 0x69, 0x63,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73,
	0x79, 0x6e, 0x6f, 0x64, 0x69, 0x63, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x76, 0x67, 0x5f, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x76, 0x67, 0x4f, 0x72, 0x62, 0x69,
	0x74, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x6e,
	0x5f, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x6d, 0x65, 0x61, 0x6e, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x69,
	0x6e, 0x63, 0x6c, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x4f, 0x66, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x22,
	0xd2, 0x06, 0x0a, 0x0c, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6e, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x71, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x71,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x6e, 0x44, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x75,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18,
	0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x65, 0x72, 0x74, 0x69,
	0x61, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x49, 0x6e, 0x65, 0x72, 0x74, 0x69, 0x61, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f,
	0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x38,
	0x0a, 0x18, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x16, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x65, 0x71, 0x75, 0x61,
	0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a,
	0x65, 0x71, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x78,
	0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x61, 0x78, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x6e, 0x6f, 0x72,
	0x74, 0x68, 0x70, 0x6f, 0x6c, 0x65, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x73, 0x63,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6e, 0x6f,
	0x72, 0x74, 0x68, 0x70, 0x6f, 0x6c, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x63, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x70, 0x6f,
	0x6c, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x70, 0x6f, 0x6c, 0x65, 0x44,
	0x65, 0x63, 0x6c, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6c,
	0x62, 0x65, 0x64, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x52, 0x06, 0x61, 0x6c, 0x62, 0x65,
	0x64, 0x6f, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x0b, 0x73,
	0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x48, 0x0a, 0x12, 0x61, 0x70,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x41, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x52, 0x11, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x67, 0x6e, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x22, 0x66, 0x0a, 0x0e, 0x41, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x07,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x41, 0x73, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x22, 0x45, 0x0a, 0x0b, 0x53, 0x75, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e,
	0x22, 0x37, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x67, 0x6e,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x77, 0x0a, 0x0b, 0x49, 0x6e, 0x63,
	0x6c, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x63, 0x6c, 0x69,
	0x70, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x63, 0x6c, 0x69,
	0x70, 0x74, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x6e, 0x73, 0x5f, 0x65, 0x71, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x75, 0x6e, 0x73,
	0x45, 0x71, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x22, 0x3a, 0x0a, 0x06, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x62, 0x6f, 0x6e, 0x64, 0x22, 0x30,
	0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x22, 0x3c, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x22, 0x13,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x3c, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x32, 0x99, 0x01, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x12, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x5a,
	0x08, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_planet_planetpb_planet_proto_rawDescOnce sync.Once
	file_planet_planetpb_planet_proto_rawDescData = file_planet_planetpb_planet_proto_rawDesc
)

func file_planet_planetpb_planet_proto_rawDescGZIP() []byte {
	file_planet_planetpb_planet_proto_rawDescOnce.Do(func() {
		file_planet_planetpb_planet_proto_rawDescData = protoimpl.X.CompressGZIP(file_planet_planetpb_planet_proto_rawDescData)
	})
	return file_planet_planetpb_planet_proto_rawDescData
}

var file_planet_planetpb_planet_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_planet_planetpb_planet_proto_goTypes = []interface{}{
	(*Planet)(nil),             // 0: planet.Planet
	(*OrbitalInfo)(nil),        // 1: planet.OrbitalInfo
	(*PhysicalInfo)(nil),       // 2: planet.PhysicalInfo
	(*AtmosphereInfo)(nil),     // 3: planet.AtmosphereInfo
	(*Element)(nil),            // 4: planet.Element
	(*SurfaceTemp)(nil),        // 5: planet.SurfaceTemp
	(*ApparentMagnitude)(nil),  // 6: planet.ApparentMagnitude
	(*Inclination)(nil),        // 7: planet.Inclination
	(*Albedo)(nil),             // 8: planet.Albedo
	(*ReadPlanetRequest)(nil),  // 9: planet.ReadPlanetRequest
	(*ReadPlanetResponse)(nil), // 10: planet.ReadPlanetResponse
	(*ListPlanetRequest)(nil),  // 11: planet.ListPlanetRequest
	(*ListPlanetResponse)(nil), // 12: planet.ListPlanetResponse
}
var file_planet_planetpb_planet_proto_depIdxs = []int32{
	1,  // 0: planet.Planet.orbital_info:type_name -> planet.OrbitalInfo
	2,  // 1: planet.Planet.physical_info:type_name -> planet.PhysicalInfo
	3,  // 2: planet.Planet.atmosphere_info:type_name -> planet.AtmosphereInfo
	7,  // 3: planet.OrbitalInfo.inclination:type_name -> planet.Inclination
	8,  // 4: planet.PhysicalInfo.albedo:type_name -> planet.Albedo
	5,  // 5: planet.PhysicalInfo.surface_temp:type_name -> planet.SurfaceTemp
	6,  // 6: planet.PhysicalInfo.apparent_magnitude:type_name -> planet.ApparentMagnitude
	4,  // 7: planet.AtmosphereInfo.element:type_name -> planet.Element
	0,  // 8: planet.ReadPlanetResponse.planet:type_name -> planet.Planet
	0,  // 9: planet.ListPlanetResponse.planet:type_name -> planet.Planet
	9,  // 10: planet.PlanetService.ReadPlanet:input_type -> planet.ReadPlanetRequest
	11, // 11: planet.PlanetService.ListPlanet:input_type -> planet.ListPlanetRequest
	10, // 12: planet.PlanetService.ReadPlanet:output_type -> planet.ReadPlanetResponse
	12, // 13: planet.PlanetService.ListPlanet:output_type -> planet.ListPlanetResponse
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_planet_planetpb_planet_proto_init() }
func file_planet_planetpb_planet_proto_init() {
	if File_planet_planetpb_planet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_planet_planetpb_planet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Planet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrbitalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtmosphereInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurfaceTemp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApparentMagnitude); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inclination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Albedo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadPlanetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadPlanetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlanetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlanetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_planet_planetpb_planet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_planet_planetpb_planet_proto_goTypes,
		DependencyIndexes: file_planet_planetpb_planet_proto_depIdxs,
		MessageInfos:      file_planet_planetpb_planet_proto_msgTypes,
	}.Build()
	File_planet_planetpb_planet_proto = out.File
	file_planet_planetpb_planet_proto_rawDesc = nil
	file_planet_planetpb_planet_proto_goTypes = nil
	file_planet_planetpb_planet_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PlanetServiceClient is the client API for PlanetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlanetServiceClient interface {
	ReadPlanet(ctx context.Context, in *ReadPlanetRequest, opts ...grpc.CallOption) (*ReadPlanetResponse, error)
	ListPlanet(ctx context.Context, in *ListPlanetRequest, opts ...grpc.CallOption) (*ListPlanetResponse, error)
}

type planetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanetServiceClient(cc grpc.ClientConnInterface) PlanetServiceClient {
	return &planetServiceClient{cc}
}

func (c *planetServiceClient) ReadPlanet(ctx context.Context, in *ReadPlanetRequest, opts ...grpc.CallOption) (*ReadPlanetResponse, error) {
	out := new(ReadPlanetResponse)
	err := c.cc.Invoke(ctx, "/planet.PlanetService/ReadPlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planetServiceClient) ListPlanet(ctx context.Context, in *ListPlanetRequest, opts ...grpc.CallOption) (*ListPlanetResponse, error) {
	out := new(ListPlanetResponse)
	err := c.cc.Invoke(ctx, "/planet.PlanetService/ListPlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanetServiceServer is the server API for PlanetService service.
type PlanetServiceServer interface {
	ReadPlanet(context.Context, *ReadPlanetRequest) (*ReadPlanetResponse, error)
	ListPlanet(context.Context, *ListPlanetRequest) (*ListPlanetResponse, error)
}

// UnimplementedPlanetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPlanetServiceServer struct {
}

func (*UnimplementedPlanetServiceServer) ReadPlanet(context.Context, *ReadPlanetRequest) (*ReadPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPlanet not implemented")
}
func (*UnimplementedPlanetServiceServer) ListPlanet(context.Context, *ListPlanetRequest) (*ListPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlanet not implemented")
}

func RegisterPlanetServiceServer(s *grpc.Server, srv PlanetServiceServer) {
	s.RegisterService(&_PlanetService_serviceDesc, srv)
}

func _PlanetService_ReadPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanetServiceServer).ReadPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/planet.PlanetService/ReadPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanetServiceServer).ReadPlanet(ctx, req.(*ReadPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanetService_ListPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanetServiceServer).ListPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/planet.PlanetService/ListPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanetServiceServer).ListPlanet(ctx, req.(*ListPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlanetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "planet.PlanetService",
	HandlerType: (*PlanetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadPlanet",
			Handler:    _PlanetService_ReadPlanet_Handler,
		},
		{
			MethodName: "ListPlanet",
			Handler:    _PlanetService_ListPlanet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "planet/planetpb/planet.proto",
}

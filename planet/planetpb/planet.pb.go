// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: planet/planetpb/planet.proto

package planetpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// We can define our planet and all of its corresponding data here, we can split this up later if we want.
type Planet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanetId         string            `protobuf:"bytes,1,opt,name=planet_id,json=planetId,proto3" json:"planet_id,omitempty"`
	Name             string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Facts            []*Facts          `protobuf:"bytes,3,rep,name=facts,proto3" json:"facts,omitempty"`
	Image            string            `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	BasicInformation *BasicInformation `protobuf:"bytes,5,opt,name=basic_information,json=basicInformation,proto3" json:"basic_information,omitempty"`
}

func (x *Planet) Reset() {
	*x = Planet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Planet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Planet) ProtoMessage() {}

func (x *Planet) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Planet.ProtoReflect.Descriptor instead.
func (*Planet) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{0}
}

func (x *Planet) GetPlanetId() string {
	if x != nil {
		return x.PlanetId
	}
	return ""
}

func (x *Planet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Planet) GetFacts() []*Facts {
	if x != nil {
		return x.Facts
	}
	return nil
}

func (x *Planet) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Planet) GetBasicInformation() *BasicInformation {
	if x != nil {
		return x.BasicInformation
	}
	return nil
}

type Facts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Fact  string `protobuf:"bytes,2,opt,name=fact,proto3" json:"fact,omitempty"`
}

func (x *Facts) Reset() {
	*x = Facts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Facts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facts) ProtoMessage() {}

func (x *Facts) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facts.ProtoReflect.Descriptor instead.
func (*Facts) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{1}
}

func (x *Facts) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Facts) GetFact() string {
	if x != nil {
		return x.Fact
	}
	return ""
}

type BasicInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlternateName        string `protobuf:"bytes,1,opt,name=alternate_name,json=alternateName,proto3" json:"alternate_name,omitempty"`
	NumberOfSatelites    int32  `protobuf:"varint,2,opt,name=number_of_satelites,json=numberOfSatelites,proto3" json:"number_of_satelites,omitempty"`
	StarSystem           string `protobuf:"bytes,3,opt,name=star_system,json=starSystem,proto3" json:"star_system,omitempty"`
	MostAbundantResource string `protobuf:"bytes,4,opt,name=most_abundant_resource,json=mostAbundantResource,proto3" json:"most_abundant_resource,omitempty"`
}

func (x *BasicInformation) Reset() {
	*x = BasicInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicInformation) ProtoMessage() {}

func (x *BasicInformation) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicInformation.ProtoReflect.Descriptor instead.
func (*BasicInformation) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{2}
}

func (x *BasicInformation) GetAlternateName() string {
	if x != nil {
		return x.AlternateName
	}
	return ""
}

func (x *BasicInformation) GetNumberOfSatelites() int32 {
	if x != nil {
		return x.NumberOfSatelites
	}
	return 0
}

func (x *BasicInformation) GetStarSystem() string {
	if x != nil {
		return x.StarSystem
	}
	return ""
}

func (x *BasicInformation) GetMostAbundantResource() string {
	if x != nil {
		return x.MostAbundantResource
	}
	return ""
}

type ReadPlanetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanetId string `protobuf:"bytes,1,opt,name=planet_id,json=planetId,proto3" json:"planet_id,omitempty"` // We can fetch by the mongodb ID, which we will have on the frontend Vue app.
}

func (x *ReadPlanetRequest) Reset() {
	*x = ReadPlanetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadPlanetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPlanetRequest) ProtoMessage() {}

func (x *ReadPlanetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPlanetRequest.ProtoReflect.Descriptor instead.
func (*ReadPlanetRequest) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{3}
}

func (x *ReadPlanetRequest) GetPlanetId() string {
	if x != nil {
		return x.PlanetId
	}
	return ""
}

type ReadPlanetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Planet *Planet `protobuf:"bytes,1,opt,name=planet,proto3" json:"planet,omitempty"` // List of planets
}

func (x *ReadPlanetResponse) Reset() {
	*x = ReadPlanetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadPlanetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPlanetResponse) ProtoMessage() {}

func (x *ReadPlanetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPlanetResponse.ProtoReflect.Descriptor instead.
func (*ReadPlanetResponse) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{4}
}

func (x *ReadPlanetResponse) GetPlanet() *Planet {
	if x != nil {
		return x.Planet
	}
	return nil
}

type ListPlanetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPlanetRequest) Reset() {
	*x = ListPlanetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlanetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanetRequest) ProtoMessage() {}

func (x *ListPlanetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanetRequest.ProtoReflect.Descriptor instead.
func (*ListPlanetRequest) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{5}
}

type ListPlanetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Planet []*Planet `protobuf:"bytes,1,rep,name=planet,proto3" json:"planet,omitempty"` // List of planets
}

func (x *ListPlanetResponse) Reset() {
	*x = ListPlanetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_planet_planetpb_planet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlanetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanetResponse) ProtoMessage() {}

func (x *ListPlanetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_planet_planetpb_planet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanetResponse.ProtoReflect.Descriptor instead.
func (*ListPlanetResponse) Descriptor() ([]byte, []int) {
	return file_planet_planetpb_planet_proto_rawDescGZIP(), []int{6}
}

func (x *ListPlanetResponse) GetPlanet() []*Planet {
	if x != nil {
		return x.Planet
	}
	return nil
}

var File_planet_planetpb_planet_proto protoreflect.FileDescriptor

var file_planet_planetpb_planet_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x70,
	0x62, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x73,
	0x52, 0x05, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a,
	0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x05, 0x46, 0x61, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x61, 0x63, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x69,
	0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x62, 0x75,
	0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x6f, 0x73, 0x74, 0x41, 0x62, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x30, 0x0a, 0x11, 0x52, 0x65,
	0x61, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x12,
	0x52, 0x65, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x74, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x3c, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x32, 0x99, 0x01,
	0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x43, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x12, 0x19, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_planet_planetpb_planet_proto_rawDescOnce sync.Once
	file_planet_planetpb_planet_proto_rawDescData = file_planet_planetpb_planet_proto_rawDesc
)

func file_planet_planetpb_planet_proto_rawDescGZIP() []byte {
	file_planet_planetpb_planet_proto_rawDescOnce.Do(func() {
		file_planet_planetpb_planet_proto_rawDescData = protoimpl.X.CompressGZIP(file_planet_planetpb_planet_proto_rawDescData)
	})
	return file_planet_planetpb_planet_proto_rawDescData
}

var file_planet_planetpb_planet_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_planet_planetpb_planet_proto_goTypes = []interface{}{
	(*Planet)(nil),             // 0: planet.Planet
	(*Facts)(nil),              // 1: planet.Facts
	(*BasicInformation)(nil),   // 2: planet.BasicInformation
	(*ReadPlanetRequest)(nil),  // 3: planet.ReadPlanetRequest
	(*ReadPlanetResponse)(nil), // 4: planet.ReadPlanetResponse
	(*ListPlanetRequest)(nil),  // 5: planet.ListPlanetRequest
	(*ListPlanetResponse)(nil), // 6: planet.ListPlanetResponse
}
var file_planet_planetpb_planet_proto_depIdxs = []int32{
	1, // 0: planet.Planet.facts:type_name -> planet.Facts
	2, // 1: planet.Planet.basic_information:type_name -> planet.BasicInformation
	0, // 2: planet.ReadPlanetResponse.planet:type_name -> planet.Planet
	0, // 3: planet.ListPlanetResponse.planet:type_name -> planet.Planet
	3, // 4: planet.PlanetService.ReadPlanet:input_type -> planet.ReadPlanetRequest
	5, // 5: planet.PlanetService.ListPlanet:input_type -> planet.ListPlanetRequest
	4, // 6: planet.PlanetService.ReadPlanet:output_type -> planet.ReadPlanetResponse
	6, // 7: planet.PlanetService.ListPlanet:output_type -> planet.ListPlanetResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_planet_planetpb_planet_proto_init() }
func file_planet_planetpb_planet_proto_init() {
	if File_planet_planetpb_planet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_planet_planetpb_planet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Planet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Facts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadPlanetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadPlanetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlanetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_planet_planetpb_planet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlanetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_planet_planetpb_planet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_planet_planetpb_planet_proto_goTypes,
		DependencyIndexes: file_planet_planetpb_planet_proto_depIdxs,
		MessageInfos:      file_planet_planetpb_planet_proto_msgTypes,
	}.Build()
	File_planet_planetpb_planet_proto = out.File
	file_planet_planetpb_planet_proto_rawDesc = nil
	file_planet_planetpb_planet_proto_goTypes = nil
	file_planet_planetpb_planet_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PlanetServiceClient is the client API for PlanetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlanetServiceClient interface {
	ReadPlanet(ctx context.Context, in *ReadPlanetRequest, opts ...grpc.CallOption) (*ReadPlanetResponse, error)
	ListPlanet(ctx context.Context, in *ListPlanetRequest, opts ...grpc.CallOption) (*ListPlanetResponse, error)
}

type planetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanetServiceClient(cc grpc.ClientConnInterface) PlanetServiceClient {
	return &planetServiceClient{cc}
}

func (c *planetServiceClient) ReadPlanet(ctx context.Context, in *ReadPlanetRequest, opts ...grpc.CallOption) (*ReadPlanetResponse, error) {
	out := new(ReadPlanetResponse)
	err := c.cc.Invoke(ctx, "/planet.PlanetService/ReadPlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planetServiceClient) ListPlanet(ctx context.Context, in *ListPlanetRequest, opts ...grpc.CallOption) (*ListPlanetResponse, error) {
	out := new(ListPlanetResponse)
	err := c.cc.Invoke(ctx, "/planet.PlanetService/ListPlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanetServiceServer is the server API for PlanetService service.
type PlanetServiceServer interface {
	ReadPlanet(context.Context, *ReadPlanetRequest) (*ReadPlanetResponse, error)
	ListPlanet(context.Context, *ListPlanetRequest) (*ListPlanetResponse, error)
}

// UnimplementedPlanetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPlanetServiceServer struct {
}

func (*UnimplementedPlanetServiceServer) ReadPlanet(context.Context, *ReadPlanetRequest) (*ReadPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPlanet not implemented")
}
func (*UnimplementedPlanetServiceServer) ListPlanet(context.Context, *ListPlanetRequest) (*ListPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlanet not implemented")
}

func RegisterPlanetServiceServer(s *grpc.Server, srv PlanetServiceServer) {
	s.RegisterService(&_PlanetService_serviceDesc, srv)
}

func _PlanetService_ReadPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanetServiceServer).ReadPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/planet.PlanetService/ReadPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanetServiceServer).ReadPlanet(ctx, req.(*ReadPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanetService_ListPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanetServiceServer).ListPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/planet.PlanetService/ListPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanetServiceServer).ListPlanet(ctx, req.(*ListPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlanetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "planet.PlanetService",
	HandlerType: (*PlanetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadPlanet",
			Handler:    _PlanetService_ReadPlanet_Handler,
		},
		{
			MethodName: "ListPlanet",
			Handler:    _PlanetService_ListPlanet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "planet/planetpb/planet.proto",
}
